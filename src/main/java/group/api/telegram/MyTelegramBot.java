package group.api.telegram;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import group.api.controller.MainController;
import jakarta.annotation.PostConstruct;

import java.util.concurrent.ConcurrentHashMap;

@Component
public class MyTelegramBot extends TelegramLongPollingBot {
    
    private final String botUsername = "frameshopAPI_bot";
    private final String botToken = "8218247231:AAELszaRBp5-TVtDEOpJmJSfVIylzeAzum0";
    
    @Autowired
    private MainController mainController;
    
    private ConcurrentHashMap<Long, UserState> userStates = new ConcurrentHashMap<>();
    
    private static class UserState {
        String state; // "WAITING_LOGIN", "WAITING_PASSWORD", "AUTHENTICATED"
        String login;
        String userRole;
        
        UserState() {
            this.state = "START";
        }
    }
    
    @PostConstruct
    public void init() {
        System.out.println("=== Telegram Bot Initialized ===");
        System.out.println("Bot Username: " + botUsername);
    }
    
    @Override
    public String getBotUsername() {
        return botUsername;
    }
    
    @Override
    public String getBotToken() {
        return botToken;
    }
    
    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getFrom().getFirstName();
            
            System.out.println("Message from " + userName + " (" + chatId + "): " + messageText);
            System.out.println("Current state: " + getUserState(chatId).state);
            
            handleMessage(chatId, messageText, userName);
        }
    }
    
    private void handleMessage(Long chatId, String messageText, String userName) {
        UserState userState = getUserState(chatId);
        
        try {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
            if ("WAITING_LOGIN".equals(userState.state)) {
                handleLoginInput(chatId, messageText, userState);
                return;
            } else if ("WAITING_PASSWORD".equals(userState.state)) {
                handlePasswordInput(chatId, messageText, userState);
                return;
            }
            
            switch (messageText.toLowerCase()) {
                case "/start":
                    sendWelcomeMessage(chatId, userName);
                    break;
                case "/auth":
                    startAuthorization(chatId, userState);
                    break;
                case "/help":
                    sendHelpMessage(chatId);
                    break;
                case "/logout":
                    logout(chatId, userState);
                    break;
                default:
                    if ("AUTHENTICATED".equals(userState.state)) {
                        sendMessage(chatId, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: " + userState.userRole + 
                                  "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    } else {
                        sendMessage(chatId, "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth");
                    }
                    break;
            }
        } catch (Exception e) {
            System.err.println("Error handling message: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            e.printStackTrace();
        }
    }
    
    private UserState getUserState(Long chatId) {
        return userStates.computeIfAbsent(chatId, k -> new UserState());
    }
    
    private void sendWelcomeMessage(Long chatId, String userName) {
        String welcome = "üëã –ü—Ä–∏–≤–µ—Ç, " + userName + "!\n\n" +
                        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –≤—ã—à–∏–≤–∫–∏!\n\n" +
                        "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é:\n" +
                        "üîê /auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è\n\n" +
                        "–î—Ä—É–≥–∏–µ –∫–æ–º–∞–Ω–¥—ã:\n" +
                        "‚ÑπÔ∏è  /help - –°–ø—Ä–∞–≤–∫–∞\n" +
                        "üö™ /logout - –í—ã–π—Ç–∏";
        
        sendMessage(chatId, welcome);
    }
    
    private void startAuthorization(Long chatId, UserState userState) {
        userState.state = "WAITING_LOGIN";
        userState.login = null;
        userState.userRole = null;
        sendMessage(chatId, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:");
    }
    
    private void handleLoginInput(Long chatId, String login, UserState userState) {
        userState.login = login.trim();
        userState.state = "WAITING_PASSWORD";
        sendMessage(chatId, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + login + "':");
    }
    
    private void handlePasswordInput(Long chatId, String password, UserState userState) {
        if (userState.login == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /auth");
            userState.state = "START";
            return;
        }
        
        try {
            System.out.println("Attempting authentication for login: " + userState.login);
            String authResult = mainController.getAutorization(userState.login, password.trim());
            System.out.println("Authentication result: " + authResult);
            
            String response;
            if (!"NO".equals(authResult)) {
                userState.state = "AUTHENTICATED";
                userState.userRole = getRoleName(authResult);
                response = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –í—ã –≤–æ—à–ª–∏ –∫–∞–∫ " + userState.userRole + 
                          "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.\n" +
                          "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.";
            } else {
                userState.state = "START";
                userState.login = null;
                response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /auth";
            }
            
            sendMessage(chatId, response);
            
        } catch (Exception e) {
            System.err.println("Authentication error: " + e.getMessage());
            userState.state = "START";
            userState.login = null;
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ: /auth");
            e.printStackTrace();
        }
    }
    
    private String getRoleName(String authResult) {
        switch (authResult) {
            case "DIRECTOR": return "–î–ò–†–ï–ö–¢–û–†";
            case "SELLER": return "–ü–†–û–î–ê–í–ï–¶";
            case "PRODUCTIONMASTER": return "–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê";
            case "YES": return "–ü–û–ö–£–ü–ê–¢–ï–õ–¨";
            default: return "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨";
        }
    }
    
    private void logout(Long chatId, UserState userState) {
        if ("AUTHENTICATED".equals(userState.state)) {
            String role = userState.userRole;
            userState.state = "START";
            userState.login = null;
            userState.userRole = null;
            sendMessage(chatId, "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã (—Ä–æ–ª—å: " + role + "). –î–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth");
        } else {
            sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –≤—Ö–æ–¥–∞.");
        }
    }
    
    private void sendHelpMessage(Long chatId) {
        UserState userState = getUserState(chatId);
        
        String help = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                     "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" +
                     "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
                     "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n" +
                     "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n";
        
        if ("AUTHENTICATED".equals(userState.state)) {
            help += "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: " + userState.userRole + "\n\n";
            
            // –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª–µ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
            switch (userState.userRole) {
                case "–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê":
                    help += "üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n" +
                           "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤\n" +
                           "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n" +
                           "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤\n";
                    break;
                case "–ü–û–ö–£–ü–ê–¢–ï–õ–¨":
                    help += "üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n" +
                           "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∏–¥–∫–∏\n" +
                           "‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n" +
                           "‚Ä¢ –ó–∞–∫–∞–∑ —Ä–∞–º–æ–∫\n";
                    break;
            }
        } else {
            help += "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: /auth";
        }
        
        sendMessage(chatId, help);
    }
    
    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        
        try {
            execute(message);
            System.out.println("Message sent to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("Failed to send message to " + chatId + ": " + e.getMessage());
        }
    }
}