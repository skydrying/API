package group.api.telegram;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.AnswerCallbackQuery;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;
import group.api.controller.MainController;
import group.api.entity.Customer;
import group.api.entity.Orders;
import group.api.entity.User;
import jakarta.annotation.PostConstruct;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class MyTelegramBot extends TelegramLongPollingBot {

    private final String botUsername = "frameshopAPI_bot";
    private final String botToken = "8218247231:AAELszaRBp5-TVtDEOpJmJSfVIylzeAzum0";

    @Autowired
    private MainController mainController;

    private ConcurrentHashMap<Long, UserState> userStates = new ConcurrentHashMap<>();

    private static class UserState {
        String state;
        String login;
        String userRole;
        Long userId;
        String fullName;
        Long selectedOrderId;

        UserState() {
            this.state = "START";
            this.selectedOrderId = null;
        }
    }

    @PostConstruct
    public void init() {
        System.out.println("=== Telegram Bot Initialized ===");
        System.out.println("Bot Username: " + botUsername);
    }

    @Override
    public String getBotUsername() {
        return botUsername;
    }

    @Override
    public String getBotToken() {
        return botToken;
    }

    @Override
    public void onUpdateReceived(Update update) {
        if (update.hasMessage() && update.getMessage().hasText()) {
            String messageText = update.getMessage().getText();
            Long chatId = update.getMessage().getChatId();
            String userName = update.getMessage().getFrom().getFirstName();

            System.out.println("Message from " + userName + " (" + chatId + "): " + messageText);
            System.out.println("Current state: " + getUserState(chatId).state);

            handleMessage(chatId, messageText, userName);
        } else if (update.hasCallbackQuery()) {
            handleCallbackQuery(update.getCallbackQuery());
        }
    }

    private void handleMessage(Long chatId, String messageText, String userName) {
        UserState userState = getUserState(chatId);

        try {
            if ("WAITING_LOGIN".equals(userState.state)) {
                handleLoginInput(chatId, messageText, userState);
                return;
            } else if ("WAITING_PASSWORD".equals(userState.state)) {
                handlePasswordInput(chatId, messageText, userState);
                return;
            }

            switch (messageText.toLowerCase()) {
                case "/start":
                    sendWelcomeMessage(chatId, userName);
                    break;
                case "/auth":
                    startAuthorization(chatId, userState);
                    break;
                case "/help":
                    sendHelpMessage(chatId);
                    break;
                case "/logout":
                    logout(chatId, userState);
                    break;
                default:
                    if ("AUTHENTICATED".equals(userState.state)) {
                        sendMessage(chatId, "–í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: " + userState.userRole +
                                "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.");
                    } else {
                        sendMessage(chatId, "–î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–∏—Å—Ç–µ–º–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /auth");
                    }
                    break;
            }
        } catch (Exception e) {
            System.err.println("Error handling message: " + e.getMessage());
            sendMessage(chatId, "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
            e.printStackTrace();
        }
    }

    private void handleCallbackQuery(CallbackQuery callbackQuery) {
        Long chatId = callbackQuery.getMessage().getChatId();
        String data = callbackQuery.getData();
        UserState userState = getUserState(chatId);

        try {
            if (data.startsWith("select_order_")) {
                String orderIdStr = data.substring("select_order_".length());
                Long orderId = Long.parseLong(orderIdStr);
                userState.selectedOrderId = orderId;
                sendStatusMenu(chatId, orderId);
            } else if (data.startsWith("change_status_")) {
                String[] parts = data.split("_");
                Long orderId = Long.parseLong(parts[2]);
                String newStatus = parts[3];
                if (userState.selectedOrderId != null && userState.selectedOrderId.equals(orderId)) {
                    changeOrderStatus(chatId, orderId, newStatus, userState);
                } else {
                    sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞: –∑–∞–∫–∞–∑ –Ω–µ –≤—ã–±—Ä–∞–Ω.");
                }
            } else {
                switch (data) {
                    case "personal_data":
                        if ("AUTHENTICATED".equals(userState.state) && userState.userId != null) {
                            String response = getPersonalDataResponse(userState);
                            InlineKeyboardMarkup keyboard = createBackKeyboard();
                            sendMessageWithInlineKeyboard(chatId, response, keyboard);
                        } else {
                            sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã.");
                        }
                        break;
                    case "my_orders":
                        if ("–ü–û–ö–£–ü–ê–¢–ï–õ–¨".equals(userState.userRole) && "AUTHENTICATED".equals(userState.state)) {
                            String response = getMyOrdersResponse(userState);
                            InlineKeyboardMarkup keyboard = createBackKeyboard();
                            sendMessageWithInlineKeyboard(chatId, response, keyboard);
                        } else {
                            sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–π.");
                        }
                        break;
                    case "view_orders":
                        if ("–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê".equals(userState.userRole) && "AUTHENTICATED".equals(userState.state)) {
                            System.out.println("Production master viewing orders for userId: " + userState.userId);
                            String response = getProductionMasterOrdersResponse(userState);
                            InlineKeyboardMarkup keyboard = createBackKeyboard();
                            sendMessageWithInlineKeyboard(chatId, response, keyboard);
                        } else {
                            sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.");
                        }
                        break;
                    case "change_order_status":
                        if ("–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê".equals(userState.userRole) && "AUTHENTICATED".equals(userState.state)) {
                            sendOrderListForStatusChange(chatId, userState);
                        } else {
                            sendMessage(chatId, "‚ùå –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω. –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –º–∞—Å—Ç–µ—Ä–æ–≤ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞.");
                        }
                        break;
                    case "exit":
                        logout(chatId, userState);
                        break;
                    case "back_to_menu":
                        sendMainMenu(chatId, userState);
                        break;
                    case "auth":
                        startAuthorization(chatId, userState);
                        break;
                    default:
                        sendMessage(chatId, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞.");
                        break;
                }
            }

            AnswerCallbackQuery answer = new AnswerCallbackQuery();
            answer.setCallbackQueryId(callbackQuery.getId());
            answer.setText("–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ!");
            execute(answer);

        } catch (Exception e) {
            System.err.println("Error handling callback: " + e.getMessage());
            try {
                AnswerCallbackQuery answer = new AnswerCallbackQuery();
                answer.setCallbackQueryId(callbackQuery.getId());
                answer.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ.");
                answer.setShowAlert(true);
                execute(answer);
            } catch (TelegramApiException ex) {
                ex.printStackTrace();
            }
        }
    }

    private InlineKeyboardMarkup createBackKeyboard() {
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è");
        backButton.setCallbackData("back_to_menu");
        row.add(backButton);
        rows.add(row);
        keyboard.setKeyboard(rows);
        return keyboard;
    }

    private void sendMainMenu(Long chatId, UserState userState) {
        String text = "‚≠ê –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, " + userState.fullName + "!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton personalDataButton = new InlineKeyboardButton();
        personalDataButton.setText("üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ");
        personalDataButton.setCallbackData("personal_data");
        row.add(personalDataButton);

        if ("–ü–û–ö–£–ü–ê–¢–ï–õ–¨".equals(userState.userRole)) {
            InlineKeyboardButton myOrdersButton = new InlineKeyboardButton();
            myOrdersButton.setText("üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã");
            myOrdersButton.setCallbackData("my_orders");
            row.add(myOrdersButton);
        } else if ("–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê".equals(userState.userRole)) {
            InlineKeyboardButton viewOrdersButton = new InlineKeyboardButton();
            viewOrdersButton.setText("üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤");
            viewOrdersButton.setCallbackData("view_orders");
            row.add(viewOrdersButton);
            InlineKeyboardButton changeStatusButton = new InlineKeyboardButton();
            changeStatusButton.setText("üîÑ –ü–æ–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞");
            changeStatusButton.setCallbackData("change_order_status");
            row.add(changeStatusButton);
        }

        rows.add(row);
        List<InlineKeyboardButton> exitRow = new ArrayList<>();
        InlineKeyboardButton exitButton = new InlineKeyboardButton();
        exitButton.setText("üö™ –í—ã–π—Ç–∏");
        exitButton.setCallbackData("exit");
        exitRow.add(exitButton);
        rows.add(exitRow);
        keyboard.setKeyboard(rows);

        sendMessageWithInlineKeyboard(chatId, text, keyboard);
    }

    private void sendOrderListForStatusChange(Long chatId, UserState userState) {
        try {
            Long masterId = userState.userId;
            List<Orders> allOrders = (List<Orders>) mainController.allOrders();

            List<Orders> masterOrders = new ArrayList<>();
            for (Orders order : allOrders) {
                if (order.getProductionMasterID().getIdUser() != null && order.getProductionMasterID().getIdUser().getId().longValue() == masterId) {
                    masterOrders.add(order);
                }
            }

            if (masterOrders.isEmpty()) {
                sendMessage(chatId, "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.");
                return;
            }

            String text = "üìã –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞:\n\n";
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();

            for (Orders order : masterOrders) {
                List<InlineKeyboardButton> row = new ArrayList<>();
                InlineKeyboardButton orderButton = new InlineKeyboardButton();
                orderButton.setText("–ó–∞–∫–∞–∑ ‚Ññ" + order.getId());
                orderButton.setCallbackData("select_order_" + order.getId());
                row.add(orderButton);
                rows.add(row);
            }

            List<InlineKeyboardButton> backRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è");
            backButton.setCallbackData("back_to_menu");
            backRow.add(backButton);
            rows.add(backRow);

            keyboard.setKeyboard(rows);
            sendMessageWithInlineKeyboard(chatId, text, keyboard);
        } catch (Exception e) {
            System.err.println("Error in sendOrderListForStatusChange: " + e.getMessage());
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –∑–∞–∫–∞–∑–æ–≤.");
        }
    }

    private void sendStatusMenu(Long chatId, Long orderId) {
        String text = "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –¥–ª—è –∑–∞–∫–∞–∑–∞ ‚Ññ" + orderId + ":";
        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();

        List<String> statuses = Arrays.asList("–ù–æ–≤—ã–π", "–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è", "–ì–æ—Ç–æ–≤", "–û—Ç–º–µ–Ω–µ–Ω", "–ó–∞–±—Ä–∞–Ω");

        for (String status : statuses) {
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton statusButton = new InlineKeyboardButton();
            statusButton.setText(status);
            statusButton.setCallbackData("change_status_" + orderId + "_" + status.replace(" ", "_"));
            row.add(statusButton);
            rows.add(row);
        }

        List<InlineKeyboardButton> backRow = new ArrayList<>();
        InlineKeyboardButton backButton = new InlineKeyboardButton();
        backButton.setText("üîô –í–µ—Ä–Ω—É—Ç—å—Å—è");
        backButton.setCallbackData("back_to_menu");
        backRow.add(backButton);
        rows.add(backRow);

        keyboard.setKeyboard(rows);
        sendMessageWithInlineKeyboard(chatId, text, keyboard);
    }

    private void changeOrderStatus(Long chatId, Long orderId, String newStatus, UserState userState) {
        try {
            mainController.changeOrderStatus(orderId.intValue(), newStatus.replace("_", " "));
            userState.selectedOrderId = null;
            sendMessage(chatId, "‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ ‚Ññ" + orderId + " –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: " + newStatus.replace("_", " "));
            sendMainMenu(chatId, userState);
        } catch (Exception e) {
            System.err.println("Error changing order status: " + e.getMessage());
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.");
        }
    }

    private String getPersonalDataResponse(UserState userState) {
        try {
            Long userId = userState.userId;
            String response = "";

            if ("–ü–û–ö–£–ü–ê–¢–ï–õ–¨".equals(userState.userRole)) {
                Iterable<Customer> customers = mainController.allCustomers();
                boolean found = false;
                for (Customer customer : customers) {
                    if (customer.getId().longValue() == userId) {
                        int discount = 0;
                        try {
                            discount = Integer.parseInt(customer.getDiscount());
                        } catch (NumberFormatException e) {
                            System.err.println("Error parsing discount: " + e.getMessage());
                            discount = 0;
                        }
                        double totalPurchases = 0.0;
                        try {
                            totalPurchases = Double.parseDouble(customer.getTotalPurchases());
                        } catch (NumberFormatException e) {
                            System.err.println("Error parsing totalPurchases: " + e.getMessage());
                            totalPurchases = 0.0;
                        }
                        String fullName = (customer.getLastName() != null ? customer.getLastName() : "") + " " +
                                (customer.getFirstName() != null ? customer.getFirstName() : "") + " " +
                                (customer.getMiddleName() != null ? customer.getMiddleName() : "");
                        fullName = fullName.trim();

                        response = String.format("üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–ü–æ–∫—É–ø–∞—Ç–µ–ª—å):\n" +
                                        "üë§ –§–ò–û: %s\n" +
                                        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n" +
                                        "üìß Email: %s\n" +
                                        "üí∞ –°–∫–∏–¥–∫–∞: %d%%\n" +
                                        "üí∏ –û–±—â–∞—è —Å—É–º–º–∞ –ø–æ–∫—É–ø–æ–∫: %.2f",
                                fullName,
                                customer.getPhone() != null ? customer.getPhone() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                                customer.getEmail() != null ? customer.getEmail() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                                discount,
                                totalPurchases);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    response = "‚ùå –î–∞–Ω–Ω—ã–µ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ID: " + userId;
                }
            } else {
                Iterable<User> users = mainController.allUsers();
                boolean found = false;
                for (User user : users) {
                    if (user.getId().longValue() == userId) {
                        String position = getPositionByRole(userState.userRole);
                        String fullName = (user.getLastName() != null ? user.getLastName() : "") + " " +
                                (user.getFirstName() != null ? user.getFirstName() : "") + " " +
                                (user.getMiddleName() != null ? user.getMiddleName() : "");
                        fullName = fullName.trim();

                        response = String.format("üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–°–æ—Ç—Ä—É–¥–Ω–∏–∫):\n" +
                                        "üë§ –§–ò–û: %s\n" +
                                        "üìû –¢–µ–ª–µ—Ñ–æ–Ω: %s\n" +
                                        "üéÇ –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: %s\n" +
                                        "üìÖ –î–∞—Ç–∞ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞: %s\n" +
                                        "üÜî –ü–∞—Å–ø–æ—Ä—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: %s\n" +
                                        "üî¢ –°–ù–ò–õ–°: %s\n" +
                                        "üì∑ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ñ–æ—Ç–æ: %s\n" +
                                        "üëî –î–æ–ª–∂–Ω–æ—Å—Ç—å: %s",
                                fullName,
                                user.getPhone() != null ? user.getPhone() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                                user.getDateOfBirth() != null ? user.getDateOfBirth() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                                user.getDateOfEmployment() != null ? user.getDateOfEmployment() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                                user.getPassportData() != null ? user.getPassportData() : "–ù–µ —É–∫–∞–∑–∞–Ω—ã",
                                user.getSnils() != null ? user.getSnils() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                                user.getPhotoLink() != null ? user.getPhotoLink() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                                position);
                        found = true;
                        break;
                    }
                }
                if (!found) {
                    response = "‚ùå –î–∞–Ω–Ω—ã–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è ID: " + userId;
                }
            }

            return response;
        } catch (Exception e) {
            System.err.println("Error in getPersonalDataResponse: " + e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private String getMyOrdersResponse(UserState userState) {
        try {
            Long customerId = userState.userId;
            List<Orders> allOrders = (List<Orders>) mainController.allOrders();

            List<Orders> userOrders = new ArrayList<>();
            for (Orders order : allOrders) {
                if (order.getCustomerID() != null && order.getCustomerID().getId().longValue() == customerId) {
                    userOrders.add(order);
                }
            }

            if (userOrders.isEmpty()) {
                return "üì¶ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–∫–∞–∑–æ–≤.";
            }

            StringBuilder response = new StringBuilder("üì¶ –í–∞—à–∏ –∑–∞–∫–∞–∑—ã:\n\n");
            for (Orders order : userOrders) {
                response.append(String.format("üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: %s\n" +
                                "üí∞ –°—É–º–º–∞: %.2f\n" +
                                "üìä –°—Ç–∞—Ç—É—Å: %s\n" +
                                "‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n" +
                                "‚úÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %s\n" +
                                "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: %s\n\n",
                        order.getId(),
                        order.getOrderDate() != null ? order.getOrderDate() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        order.getTotalAmount() != null ? order.getTotalAmount() : 0.0,
                        order.getStatus() != null ? order.getStatus() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                        order.getDueDate() != null ? order.getDueDate() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                        order.getCompletionDate() != null ? order.getCompletionDate() : "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω",
                        order.getNotes() != null ? order.getNotes() : "–ù–µ—Ç"));
            }

            return response.toString();
        } catch (Exception e) {
            System.err.println("Error in getMyOrdersResponse: " + e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private String getProductionMasterOrdersResponse(UserState userState) {
        try {
            Long masterId = userState.userId;
            List<Orders> allOrders = (List<Orders>) mainController.allOrders();

            List<Orders> masterOrders = new ArrayList<>();
            for (Orders order : allOrders) {
                if (order.getProductionMasterID().getIdUser() != null && order.getProductionMasterID().getIdUser().getId().longValue() == masterId) {
                    masterOrders.add(order);
                }
            }

            if (masterOrders.isEmpty()) {
                return "üìã –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤.";
            }

            StringBuilder response = new StringBuilder("üìã –ó–∞–∫–∞–∑—ã –ø–æ–¥ –≤–∞—à–∏–º –∫–æ–Ω—Ç—Ä–æ–ª–µ–º:\n\n");
            for (Orders order : masterOrders) {
                response.append(String.format("üÜî –ù–æ–º–µ—Ä –∑–∞–∫–∞–∑–∞: %d\n" +
                                "üìÖ –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: %s\n" +
                                "üí∞ –°—É–º–º–∞: %.2f\n" +
                                "üìä –°—Ç–∞—Ç—É—Å: %s\n" +
                                "‚è∞ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: %s\n" +
                                "‚úÖ –î–∞—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è: %s\n" +
                                "üìù –ü—Ä–∏–º–µ—á–∞–Ω–∏—è: %s\n\n",
                        order.getId(),
                        order.getOrderDate() != null ? order.getOrderDate() : "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
                        order.getTotalAmount() != null ? order.getTotalAmount() : 0.0,
                        order.getStatus() != null ? order.getStatus() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                        order.getDueDate() != null ? order.getDueDate() : "–ù–µ —É–∫–∞–∑–∞–Ω",
                        order.getCompletionDate() != null ? order.getCompletionDate() : "–ù–µ –∑–∞–≤–µ—Ä—à—ë–Ω",
                        order.getNotes() != null ? order.getNotes() : "–ù–µ—Ç"));
            }

            return response.toString();
        } catch (Exception e) {
            System.err.println("Error in getProductionMasterOrdersResponse: " + e.getMessage());
            return "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–∫–∞–∑–æ–≤. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.";
        }
    }

    private String getPositionByRole(String userRole) {
        switch (userRole) {
            case "–î–ò–†–ï–ö–¢–û–†": return "–î–∏—Ä–µ–∫—Ç–æ—Ä";
            case "–ü–†–û–î–ê–í–ï–¶": return "–ü—Ä–æ–¥–∞–≤–µ—Ü";
            case "–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê": return "–ú–∞—Å—Ç–µ—Ä –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞";
            case "–°–û–¢–†–£–î–ù–ò–ö": return "–°–æ—Ç—Ä—É–¥–Ω–∏–∫";
            default: return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è —Ä–æ–ª—å";
        }
    }

    private UserState getUserState(Long chatId) {
        return userStates.computeIfAbsent(chatId, k -> new UserState());
    }

    private void sendWelcomeMessage(Long chatId, String userName) {
        String welcome = "üëã –ü—Ä–∏–≤–µ—Ç, " + userName + "!\n\n" +
                "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–∞—Å—Ç–µ—Ä—Å–∫–æ–π –≤—ã—à–∏–≤–∫–∏!\n\n" +
                "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏—è:";

        InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> rows = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();
        InlineKeyboardButton authButton = new InlineKeyboardButton();
        authButton.setText("üîê –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è");
        authButton.setCallbackData("auth");
        row.add(authButton);
        rows.add(row);
        keyboard.setKeyboard(rows);

        sendMessageWithInlineKeyboard(chatId, welcome, keyboard);
    }

    private void startAuthorization(Long chatId, UserState userState) {
        userState.state = "WAITING_LOGIN";
        userState.login = null;
        userState.userRole = null;
        userState.userId = null;
        userState.fullName = null;
        sendMessage(chatId, "üîê –í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ª–æ–≥–∏–Ω:");
    }

    private void handleLoginInput(Long chatId, String login, UserState userState) {
        userState.login = login.trim();
        userState.state = "WAITING_PASSWORD";
        sendMessage(chatId, "üîë –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è '" + login + "':");
    }

    private void handlePasswordInput(Long chatId, String password, UserState userState) {
        if (userState.login == null) {
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ —Å–µ—Å—Å–∏–∏. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ: /auth");
            userState.state = "START";
            return;
        }

        try {
            System.out.println("Attempting authentication for login: " + userState.login);
            String authResult = mainController.getAutorization(userState.login, password.trim());
            System.out.println("Authentication result: " + authResult);

            String response;
            if (!"NO".equals(authResult)) {
                String role = authResult;
                Long id = null;
                String fullName = "";

                Iterable<User> users = mainController.allUsers();
                for (User user : users) {
                    if (user.getLogin() != null && user.getLogin().equals(userState.login)) {
                        id = user.getId().longValue();
                        fullName = (user.getLastName() != null ? user.getLastName() : "") + " " +
                                (user.getFirstName() != null ? user.getFirstName() : "") + " " +
                                (user.getMiddleName() != null ? user.getMiddleName() : "");
                        fullName = fullName.trim();
                        break;
                    }
                }

                if (id == null) {
                    throw new Exception("User not found for login: " + userState.login);
                }

                userState.state = "AUTHENTICATED";
                userState.userRole = getRoleName(role);
                userState.userId = id;
                userState.fullName = fullName;

                response = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + fullName +
                        "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.";

                sendMainMenu(chatId, userState);

            } else {
                Iterable<Customer> customers = mainController.allCustomers();
                Customer foundCustomer = null;
                for (Customer customer : customers) {
                    if (customer.getLogins() != null && customer.getLogins().equals(userState.login) &&
                            customer.getPasswords() != null && customer.getPasswords().equals(password.trim())) {
                        foundCustomer = customer;
                        break;
                    }
                }
                if (foundCustomer != null) {
                    userState.state = "AUTHENTICATED";
                    userState.userRole = "–ü–û–ö–£–ü–ê–¢–ï–õ–¨";
                    userState.userId = foundCustomer.getId().longValue();
                    String fullName = (foundCustomer.getLastName() != null ? foundCustomer.getLastName() : "") + " " +
                            (foundCustomer.getFirstName() != null ? foundCustomer.getFirstName() : "") + " " +
                            (foundCustomer.getMiddleName() != null ? foundCustomer.getMiddleName() : "");
                    fullName = fullName.trim();
                    userState.fullName = fullName;

                    response = "‚úÖ –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞! –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å " + fullName +
                            "\n\n–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —Ñ—É–Ω–∫—Ü–∏–∏ —Å–∏—Å—Ç–µ–º—ã.";

                    sendMainMenu(chatId, userState);
                } else {
                    userState.state = "START";
                    userState.login = null;
                    userState.userId = null;
                    userState.fullName = null;
                    response = "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞: /auth";
                    sendMessage(chatId, response);
                }
            }

        } catch (Exception e) {
            System.err.println("Authentication error: " + e.getMessage());
            userState.state = "START";
            userState.login = null;
            userState.userId = null;
            userState.fullName = null;
            sendMessage(chatId, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ: /auth");
            e.printStackTrace();
        }
    }

    private String getRoleName(String role) {
        switch (role) {
            case "CUSTOMER":
                return "–ü–û–ö–£–ü–ê–¢–ï–õ–¨";
            case "DIRECTOR":
                return "–î–ò–†–ï–ö–¢–û–†";
            case "SELLER":
                return "–ü–†–û–î–ê–í–ï–¶";
            case "PRODUCTIONMASTER":
                return "–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê";
            case "EMPLOYEE":
                return "–°–û–¢–†–£–î–ù–ò–ö";
            default:
                return "–ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–¨";
        }
    }

    private void logout(Long chatId, UserState userState) {
        if ("AUTHENTICATED".equals(userState.state)) {
            String fullName = userState.fullName;
            userState.state = "START";
            userState.login = null;
            userState.userRole = null;
            userState.userId = null;
            userState.fullName = null;
            String text = "\uD83D\uDC4B –î–æ –Ω–æ–≤—ã—Ö –≤—Å—Ç—Ä–µ—á, " + fullName + "!";
            InlineKeyboardMarkup keyboard = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> rows = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();
            InlineKeyboardButton authButton = new InlineKeyboardButton();
            authButton.setText("üîê –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è");
            authButton.setCallbackData("auth");
            row.add(authButton);
            rows.add(row);
            keyboard.setKeyboard(rows);

            sendMessageWithInlineKeyboard(chatId, text, keyboard);
        } else {
            sendMessage(chatId, "‚ùå –í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /auth –¥–ª—è –≤—Ö–æ–¥–∞.");
        }
    }

    private void sendHelpMessage(Long chatId) {
        UserState userState = getUserState(chatId);

        String help = "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n" +
                "/start - –ù–∞—á–∞–ª–æ —Ä–∞–±–æ—Ç—ã\n" +
                "/auth - –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –≤ —Å–∏—Å—Ç–µ–º–µ\n" +
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n" +
                "/logout - –í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã\n\n";

        if ("AUTHENTICATED".equals(userState.state)) {
            help += "‚úÖ –í—ã –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã –∫–∞–∫: " + userState.userRole + "\n\n";

            switch (userState.userRole) {
                case "–ú–ê–°–¢–ï–† –ü–†–û–ò–ó–í–û–î–°–¢–í–ê":
                    help += "üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –º–∞—Å—Ç–µ—Ä–∞ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–∞:\n" +
                            "‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–∫–∞–∑–æ–≤ (–∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n" +
                            "‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º–∏\n" +
                            "‚Ä¢ –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–æ–≤ –∑–∞–∫–∞–∑–æ–≤\n";
                    break;
                case "–ü–û–ö–£–ü–ê–¢–ï–õ–¨":
                    help += "üéØ –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è:\n" +
                            "‚Ä¢ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∫–∏–¥–∫–∏\n" +
                            "‚Ä¢ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞\n" +
                            "‚Ä¢ –ó–∞–∫–∞–∑ —Ä–∞–º–æ–∫\n" +
                            "‚Ä¢ üìã –õ–∏—á–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ (–∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)\n" +
                            "‚Ä¢ üì¶ –ú–æ–∏ –∑–∞–∫–∞–∑—ã (–∫–Ω–æ–ø–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏)";
                    break;
            }
            help += "\n\n–ü–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø–æ—è–≤–∏—Ç—Å—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ª–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö.";
        } else {
            help += "üîê –î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º —Å–∏—Å—Ç–µ–º—ã –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é: /auth";
        }

        sendMessage(chatId, help);
    }

    private void sendMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);

        try {
            execute(message);
            System.out.println("Message sent to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("Failed to send message to " + chatId + ": " + e.getMessage());
        }
    }

    private void sendMessageWithInlineKeyboard(Long chatId, String text, InlineKeyboardMarkup keyboard) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(keyboard);

        try {
            execute(message);
            System.out.println("Message with inline keyboard sent to chat: " + chatId);
        } catch (TelegramApiException e) {
            System.err.println("Failed to send message with keyboard to " + chatId + ": " + e.getMessage());
        }
    }
}
